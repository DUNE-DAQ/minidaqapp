name: build-develop

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  push:
    branches: [ carloschavez/ci_testing ]
    paths-ignore:
      - 'docs/**'
  pull_request:
    branches: [ carloschavez/ci_testing ]
  schedule:
    - cron: "0 7 * * *"

  workflow_dispatch:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Build_against_dev_release_and_run_nanorc_pytest:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container:
      image: dunedaq/sl7-minimal:dev
    defaults:
      run:
        shell: bash
    env:
      DBT_AREA_FILE: "dbt-settings"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs a single command using the runners shell
    

    - name: Checkout daq-buildtools
      uses: actions/checkout@v2
      with:
        repository: DUNE-DAQ/daq-buildtools
        path: daq-buildtools

    - name: Checkout daq-release
      uses: actions/checkout@v2
      with:
        repository: DUNE-DAQ/daq-release
        path: daq-release

    - name: Checkout nanorc
      uses: actions/checkout@v2
      with:
        repository: DUNE-DAQ/nanorc
        path: nanorc

    - name: setup dev area
      run: |
          source $GITHUB_WORKSPACE/daq-buildtools/env.sh
          dbt-create.sh -r /releases dunedaq-develop dev
          
    - name: checkout package for CI
      uses: actions/checkout@v2
      with:
        path: ${{ github.repository }}


    
    - name: running minidaqapp with nanorc and pytest
      run: |
          export REPO=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')
          source $GITHUB_WORKSPACE/daq-buildtools/env.sh
          cd $GITHUB_WORKSPACE/dev
          dbt-workarea-env || true
          setup_repo_env="SETUP_$REPO"
          [[ -z ${!setup_env_repo+x} ]] || unsetup $REPO
          cp -pr $GITHUB_WORKSPACE/DUNE-DAQ/$REPO $GITHUB_WORKSPACE/dev/sourcecode
          cp -pr $GITHUB_WORKSPACE/nanorc $GITHUB_WORKSPACE/dev/sourcecode
          pip install -r $GITHUB_WORKSPACE/dev/sourcecode/nanorc/requirements.txt
          pip install -r $GITHUB_WORKSPACE/dev/sourcecode/minidaqapp/python/minidaqapp/integration_tests/requirements.txt
          dbt-build.sh --install
          dbt-workarea-env --refresh
          curl https://cernbox.cern.ch/index.php/s/VAqNtn7bwuQtff3/download -o frames.bin
          pytest --frame-file $GITHUB_WORKSPACE/dev/frames.bin $GITHUB_WORKSPACE/dev/sourcecode/minidaqapp/scripts/test_integration.py
          $GITHUB_WORKSPACE/daq-release/scripts/upsify-daq-pkgs.py -w $GITHUB_WORKSPACE/dev -o /tarballs

#    - name: setup build env and build the dev release
#      run: |
#          export REPO=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')
#          source $GITHUB_WORKSPACE/daq-buildtools/env.sh
#          cd $GITHUB_WORKSPACE/dev
#          dbt-workarea-env || true
#          setup_repo_env="SETUP_$REPO"
#          [[ -z ${!setup_env_repo+x} ]] || unsetup $REPO
#          cp -pr $GITHUB_WORKSPACE/DUNE-DAQ/$REPO $GITHUB_WORKSPACE/dev/sourcecode
#          dbt-build.sh --install
#          $GITHUB_WORKSPACE/daq-release/scripts/upsify-daq-pkgs.py -w $GITHUB_WORKSPACE/dev -o /tarballs

    - name: upload UPS tarball and log file
      uses: actions/upload-artifact@v2
      with:
        name: ups_package
        path: /tarballs

    - name: upload build log file
      uses: actions/upload-artifact@v2
      with:
        name: build_log
        path: ${{ github.workspace }}/dev/log

