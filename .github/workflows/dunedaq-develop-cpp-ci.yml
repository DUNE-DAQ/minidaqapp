name: build-develop

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  push:
    branches: [ carloschavez/ci_testing ]
    paths-ignore:
      - 'docs/**'
  pull_request:
    branches: [ carloschavez/ci_testing ]
  schedule:
    - cron: "0 7 * * *"

  workflow_dispatch:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Build_against_dev_release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container:
      image: dunedaq/sl7-minimal:dev
    defaults:
      run:
        shell: bash
    env:
      DBT_AREA_FILE: "dbt-settings"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs a single command using the runners shell
    

    - name: Checkout daq-buildtools
      uses: actions/checkout@v2
      with:
        repository: DUNE-DAQ/daq-buildtools
        path: daq-buildtools

    - name: Checkout daq-release
      uses: actions/checkout@v2
      with:
        repository: DUNE-DAQ/daq-release
        path: daq-release

    - name: Checkout nanorc
      uses: actions/checkout@v2
      with:
        repository: DUNE-DAQ/nanorc
        path: nanorc

    - name: setup dev area
      run: |
          source $GITHUB_WORKSPACE/daq-buildtools/env.sh
          dbt-create.sh -r /releases dunedaq-develop dev
          
    - name: checkout package for CI
      uses: actions/checkout@v2
      with:
        path: ${{ github.repository }}
    
    - name: setup build env, build and lint the repo against the development release
      run: |
          export REPO=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')
          source $GITHUB_WORKSPACE/daq-buildtools/env.sh
          cd $GITHUB_WORKSPACE/dev
          dbt-workarea-env || true
          setup_repo_env="SETUP_$REPO"
          [[ -z ${!setup_env_repo+x} ]] || unsetup $REPO
          cp -pr $GITHUB_WORKSPACE/DUNE-DAQ/$REPO $GITHUB_WORKSPACE/dev/sourcecode
          dbt-build.sh --install
          #dbt-build.sh --lint
          $GITHUB_WORKSPACE/daq-release/scripts/upsify-daq-pkgs.py -w $GITHUB_WORKSPACE/dev -o /tarballs

    - name: running minidaqapp with nanorc
      run: |
          export REPO=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')
          source $GITHUB_WORKSPACE/daq-buildtools/env.sh
          cd $GITHUB_WORKSPACE/dev
          dbt-workarea-env || true
          setup_repo_env="SETUP_$REPO"
          [[ -z ${!setup_env_repo+x} ]] || unsetup $REPO
          cp -pr $GITHUB_WORKSPACE/DUNE-DAQ/$REPO $GITHUB_WORKSPACE/dev/sourcecode
          cp -pr $GITHUB_WORKSPACE/nanorc $GITHUB_WORKSPACE/dev/sourcecode
          dbt-build.sh --install
          curl https://cernbox.cern.ch/index.php/s/VAqNtn7bwuQtff3/download -o frames.bin
          python -m minidaqapp.nanorc.mdapp_multiru_gen --host-ru localhost -d ./frames.bin -o . -s 10 mdapp_4proc
          nanorc mdapp_4proc boot init conf start 111 wait 2 resume wait 60 pause wait 2 stop scrap terminate

    - name: upload UPS tarball and log file
      uses: actions/upload-artifact@v2
      with:
        name: ups_package
        path: /tarballs

    - name: upload build log file
      uses: actions/upload-artifact@v2
      with:
        name: build_log
        path: ${{ github.workspace }}/dev/log/build*.log

   #- name: upload linter output file
     #uses: actions/upload-artifact@v2
     #with:
       #name: linting_log
       #path: ${{ github.workspace }}/dev/log/linting*.log
